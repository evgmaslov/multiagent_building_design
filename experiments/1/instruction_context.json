{"requirements": "[\"В многоквартирных зданиях государственного жилищного фонда минимальные площади квартир социального использования (без учета площадей открытых помещений, холодных кладовых и приквартирных тамбуров) и число их комнат рекомендуется принимать согласно таблице 5.1. Таблица 5.1 {Число комнат: [1, 2, 3, 4, 5, 6], Рекомендуемая площадь квартир, м2: [28 - 38, 44 - 53, 56 - 65, 70 - 77, 84 - 96, 103 - 109]}\",\n\"В многоквартирных зданиях государственного и муниципального жилищных фондов, жилищного фонда социального использования в квартирах следует предусматривать общие жилые комнаты (гостиные) и спальни, а также вспомогательные помещения: кухню (или кухню-столовую, кухню-нишу), переднюю (прихожую), туалет, ванную комнату и (или) душевую, или совмещенный санузел [туалет и ванная (душевая)], кладовую (или встроенный шкаф).\",\n\"Площадь квартир социального использования государственного и муниципального жилищных фондов должна быть не менее: общей жилой комнаты в однокомнатной квартире - 14 м2, общей жилой комнаты в квартирах с числом комнат две и более - 16 м2, спальни - 8 м2 (на двух человек - 10 м2); кухни - 8 м2; кухонной зоны в кухне (столовой) - 6 м2. В квартирах допускается проектировать кухни или кухни-ниши площадью не менее 5 м2.\",\n\"В многоквартирных зданиях государственного и муниципального жилищных фондов в 2-, 3- и 4-комнатных квартирах спальни и общие комнаты следует проектировать непроходными. При этом все квартиры должны быть оборудованы: кухней с мойкой посуды и плитой для приготовления пищи; ванной комнатой с ванной (душем) и раковиной (умывальником), туалетом с унитазом или совмещенным санузлом [ванная (душевая кабина), умывальник и унитаз].\",\n\"В квартирах частного жилищного фонда и жилищного фонда коммерческого использования функционально-планировочные связи комнат проходами и состав санитарно-технического оборудования квартир следует устанавливать по заданию на проектирование.\",\n\"В 2-, 3- и 4-комнатных квартирах должен устраиваться коридор для создания прохода между комнатами и их функционального соединения.\"]", "documentation_format_json": "{\n    \"classes\": [\n        {\"name\": \"\", \n         \"description\": \"\",\n         \"constructors\": [\n             {\"description\": \"\",\n              \"parameters\":[\n               {\"name\": \"\",\n                \"type\":\"\",\n                \"description\": \"\"}],\n               \"usecases\":[\n                   {\"case\":\"\",\n                   \"code\":\"\"}]\n              }\n         ],\n         \"methods\": [\n             {\"name\": \"\",\n              \"description\": \"\",\n              \"parameters\":[\n                  {\"name\": \"\",\n                   \"type\":\"\",\n                   \"description\": \"\"}],\n              \"usecases\":[\n                  {\"case\":\"\",\n                  \"code\":\"\"}]\n              }\n         ], \n         \"properties\": [\n             {\"name\": \"\",\n             \"type\": \"\"}\n         ],\n         \"usecases\":[\n             {\"case\":\"\",\n             \"code\":\"\"}]}\n    ]\n}", "documentation_json": "{\n    \"classes\":[\n        {\"name\": \"Room\", \n         \"description\": \"Это класс, который представляет собой объект комнаты. Он хранит в себе сведения о названии комнаты и о форме ее контура. Также с помощью методов этого класса можно корректировать геометрию комнаты и соединять ее с другими комнатами.\",\n         \"constructors\": [\n             {\"description\":\"Этот конструктор позволяет создавать комнату на основе набора точек, задающих ее контур. Этим способом лучше всего создавать комнату в случаях, когда она должна иметь сложный контур.\",\n              \"parameters\":[\n               {\"name\": \"name\",\n                \"type\":\"string\",\n                \"description\": \"Имя комнаты\"},\n               {\"name\": \"contourPoints\",\n                \"type\":\"List<Vector2>\",\n                \"description\": \"Список точек, задающих контур комнаты. Каждая точка задана двумя координатами X и Y.\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание спальни, имеющей прямоугольный контур.\",\n                  \"code\":\"Room bedroom = new Room(\n                name: \"Спальня\", \n                contourPoints: new List<Vector2>() { \n                    new Vector2(0, 0), \n                    new Vector2(0, 4000), \n                    new Vector2(5000, 4000), \n                    new Vector2(5000, 0)});\"},\n                  {\"case\":\"Создание гостиной в форме пятиугольника.\",\n                  \"code\":\"Room livingRoom = new Room(\n                name: \"Гостиная\", \n                contourPoints: new List<Vector2>() { \n                    new Vector2(0, 0), \n                    new Vector2(-1000, 4000), \n                    new Vector2(2000, 5000),\n                    new Vector2(5000, 4000), \n                    new Vector2(4000, 0)});\"}]\n              },\n             {\"description\":\"Этот конструктор позволяет создавать комнату на основе длины, ширины и координаты левого нижнего угла. Точки контура комнаты создатутся автоматически внутри конструктора, причем их порядок будет начинаться с базовой точки и идти по часовой стрелке.\",\n              \"parameters\":[\n               {\"name\": \"name\",\n                \"type\":\"string\",\n                \"description\": \"Имя комнаты\"},\n               {\"name\": \"basePoint\",\n                \"type\":\"Vector2\",\n                \"description\": \"Координата левой нижней точки комнаты\"},\n               {\"name\": \"length\",\n                \"type\":\"double\",\n                \"description\": \"Длина комнаты (ее размер по горизонтали).\"},\n               {\"name\": \"width\",\n                \"type\":\"double\",\n                \"description\": \"Ширина комнаты (ее размер по вертикали).\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание кухни в форме прямоугольника с длиной 5 метров и шириной 3 метра, находящейся в начале координат.\",\n                  \"code\":\"Room kitchen = new Room(\n                name: \"Кухня\", \n                basePoint: new Vector2(0, 0),\n                length: 5000,\n                width: 3000);\"},\n                  {\"case\":\"Создание кухни в форме квадрата со стороной 4 метра, находящейся на расстоянии 3 метра по горизонтали и 2 метра по вертикали от начала координат.\",\n                  \"code\":\"Room kitchen = new Room(\n                name: \"Кухня\", \n                basePoint: new Vector2(3000, 2000),\n                length: 4000,\n                width: 4000);\"}]\n              }\n         ],\n         \"methods\": [\n             {\"name\": \"Move\",\n              \"description\": \"Перемещает комнату на заданный вектор.\",\n              \"parameters\":[\n                  {\"name\": \"direction\",\n                   \"type\":\"Vector2\",\n                   \"description\": \"Вектор, который задает направление перемещения комнаты и расстояние, на которое комната должна переместиться.\"}],\n              \"usecases\":[\n                  {\"case\":\"Перемещение комнаты на 1 метр влево\",\n                      \"code\":\"kitchen.Move(new Vector2(-1000, 0));\"},\n                  {\"case\":\"Перемещение комнаты на 3 метра вверх\",\n                      \"code\":\"kitchen.Move(direction: new Vector2(0, 3000));\"},\n                  {\"case\":\"Перемещение комнаты на 2 метра вправо и на 1.5 метра вниз.\",\n                      \"code\":\"kitchen.Move(direction: new Vector2(2000, -1500));\"}]\n              },\n             {\"name\": \"Rotate\",\n              \"description\": \"Поворачивает комнату на заданный угол относительно заданной точки.\",\n              \"parameters\":[\n                  {\"name\": \"angle\",\n                   \"type\":\"double\",\n                   \"description\": \"Угол поворота комнаты, заданный в радианах. Положительное значение угла означает поворот против часовой стрелки, отрицательное значение - поворот против часовой стрелки.\"}],\n              \"usecases\":[\n                  {\"case\":\"Поворот комнаты на 45 градусов против часовой стрелки относительно начала координат.\",\n                      \"code\":\"bedroom.Rotate(angle: Math.PI / 4, basePoint: new Vector2(0, 0));\"},\n                  {\"case\":\"Поворот комнаты на 90 градусов по часовой стрелке относительно точки с координатами 3 метра и 2 метра.\",\n                      \"code\":\"bathroom.Rotate(angle: -Math.PI / 2, basePoint: new Vector2(3000, 2000));\"},\n                  {\"case\":\"Поворот комнаты на 15 градусов против часовой стрелки относительно начала координат.\",\n                      \"code\":\"livingRoom.Rotate(angle: 15 / 360, basePoint: new Vector2(0, 0));\"}]\n              },\n             {\"name\": \"AddContourPoint\",\n              \"description\": \"Добавляет указанную точку в контур комнаты.\",\n              \"parameters\":[\n                  {\"name\": \"point\",\n                   \"type\":\"Vector2\",\n                   \"description\": \"Точка, которую нужно добавить в контур комнаты.\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание прямоугольной комнаты 5х3 метра и добавление в ее контур точки с координатами X=2500 и Y=4000. При этом новая точка будет находиться между левым верхним и правым верхним углом комнаты. Таким образом, комната из четырехугольной превратится в пятиугольную.\",\n                      \"code\":\"Room livingRoom = new Room(\n                name: \"Гостиная\",\n                basePoint: new Vector2(0, 0),\n                length: 5000,\n                width: 3000);\n            livingRoom.AddContourPoint(point: new Vector2(2500, 4000));\"}]\n              },\n             {\"name\": \"RemoveContourPoint\",\n              \"description\": \"Удаляет из контура комнаты точку с указанными координатами, если такая точка принадлежит контуру.\",\n              \"parameters\":[\n                  {\"name\": \"point\",\n                   \"type\":\"Vector2\",\n                   \"description\": \"Точка, которую нужно удалить из контура комнаты.\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание квадратной комнаты со стороной 5 метров и удаление из нее правого верхнего угла. Таким образом, контур комнаты из квадратного станет треугольным.\",\n                      \"code\":\"Room diningRoom = new Room(\n                name: \"Столовая\",\n                basePoint: new Vector2(0, 0),\n                length: 5000,\n                width: 5000);\n            livingRoom.RemoveContourPoint(point: new Vector2(5000, 5000));\"}]\n              },\n             {\"name\": \"AddDoorBetween\",\n              \"description\": \"Добавляет в комнату дверь между точками с указанными координатами, если такие точки принадлежат контуру.\",\n              \"parameters\":[\n                  {\"name\": \"firstPoint\",\n                   \"type\":\"Vector2\",\n                   \"description\": \"Точка слева от двери\"},\n                  {\"name\": \"secondPoint\",\n                   \"type\":\"Vector2\",\n                   \"description\": \"Точка справа от двери\"},\n                  {\"name\": \"doorRelativePosition\",\n                   \"type\":\"double\",\n                   \"description\": \"Число от 0 до 1, которое определяет относительное положение двери между левой и правой точкой.\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание прихожей и добавление двери по центру между левым нижним и правым нижним углом.\",\n                      \"code\":\"Room lobby = new Room(\n                      name: \"Прихожая\", \n                      basePoint: new Vector2(), \n                      length: 2000, \n                      wigth: 3000);\n            lobby.AddDoorBetween(\n            firstPoint: new Vector2(2000, 0), secondPoint: new Vector2(0, 0), \n            doorRelativePosition: 0.5);\"}]\n              },\n             {\"name\": \"ConnectTo\",\n              \"description\": \"Присоединяет комнату к другой комнате с помощью указанной поверхности соединения.\",\n              \"parameters\":[\n                  {\"name\": \"roomToConnect\",\n                   \"type\":\"Room\",\n                   \"description\": \"Комната, с которой нужно соединиться.\"},\n                  {\"name\": \"withWall\",\n                   \"type\":\"bool\",\n                   \"description\": \"Параметр, который указывает, что между комнатами должна быть стена.\"},\n                  {\"name\": \"addDoorAt\",\n                   \"type\":\"double\",\n                   \"description\": \"Число от 0 до 1, которое определяет относительное положение двери на линии соединения комнат. Параметр является необязательным, его можно не указывать, если между комнатами не должно быть двери.\"}],\n              \"usecases\":[\n                  {\"case\":\"Создание прихожей и коридора и их соединение через удаление стены между ними.\",\n                      \"code\":\"Room lobby = new Room(\n                      name: \"Прихожая\", \n                      basePoint: new Vector2(), \n                      length: 2000, \n                      wigth: 3000);\n            Room corridor = new Room(\n            name: \"Коридор\", \n            basePoint: new Vector2(-7000, 3000), \n            length: 9000, \n            wigth: 5000);\n            corridor.ConnectTo(roomToConnect: lobby, withWall: false);\"},\n                  {\"case\":\"Создание коридора, ванной и их соединение через стену с дверью.\",\n                      \"code\":\"Room corridor = new Room(\n                      name: \"Коридор\", \n                      basePoint: new Vector2(-7000, 3000), \n                      length: 9000, \n                      wigth: 5000);\n            Room bathroom = new Room(\n            name: \"Ванная\", \n            basePoint: new Vector2(-7000, 0), \n            length: 3000, \n            wigth: 3000);\n            corridor.ConnectTo(roomToConnect: bathroom, withWall: true, addDoorAt: 0.5);\"}]\n              }, \n                 {\"case\":\"Создание ванной и столовой и их соединение глухой стеной.\",\n                      \"code\":\"Room bathroom = new Room(\n                      name:\"Ванная\", \n                      basePoint: new Vector2(-7000, 0), \n                      length: 3000, \n                      wigth: 3000);\n            Room diningRoom = new Room(\n            name: \"Столовая\", \n            basePoint: new Vector2(-13000, 0), \n            length: 6000, \n            wigth: 4500);\n            diningRoom.ConnectTo(roomToConnect: bathroom, withWall: true);\"}]\n              }\n         ]}", "documentation_csharp": "\n/// <summary>\n/// Этот класс представляет собой объект квартиры\n/// </summary>\npublic class Flat\n{\n    /// <summary>\n    /// Создает квартиру на основе набора комнат\n    /// </summary>\n    /// <param name=\"rooms\">Список комнат</param>\n    public Flat(List<Room> rooms)\n    public List<Room> Rooms { get; set; } \n}\n/// <summary>\n/// Это класс, который представляет собой объект комнаты. Он хранит в себе сведения о названии комнаты и о форме ее контура. Также с помощью методов этого класса можно корректировать геометрию комнаты и соединять ее с другими комнатами.\n/// </summary>\npublic class Room\n    {\n        #region Constructors\n        /// <summary>\n        /// Этот конструктор позволяет создавать комнату на основе набора точек, задающих ее контур. Этим способом лучше всего создавать комнату в случаях, когда она должна иметь сложный контур.\n        /// </summary>\n        /// <param name=\"name\">Имя комнаты</param>\n        /// <param name=\"contourPoints\">Список точек, задающих контур комнаты. Каждая точка задана двумя координатами X и Y.</param>\n        public Room(string name, List<Vector2> contourPoints)\n        /// <summary>\n        /// Этот конструктор позволяет создавать комнату на основе длины, ширины и координаты левого нижнего угла. Точки контура комнаты создатутся автоматически внутри конструктора, причем их порядок будет начинаться с базовой точки и идти по часовой стрелке.\n        /// </summary>\n        /// <param name=\"name\">Имя комнаты</param>\n        /// <param name=\"basePoint\">Координата левой нижней точки комнаты</param>\n        /// <param name=\"length\">Длина комнаты (ее размер по горизонтали)</param>\n        /// <param name=\"width\">Ширина комнаты (ее размер по вертикали)</param>\n        public Room(string name, Vector2 basePoint, double length, double width)\n        #endregion\n\n        #region Geometry properties\n        /// <summary>\n        /// Точки контура комнаты\n        /// </summary>\n        public List<RoomPoint> ContourPoints { get; set; } \n        /// <summary>\n        /// Линии контура комнаты\n        /// </summary>\n        public List<Border> ContourBorders { get; set; } \n        #endregion\n\n        #region Identity properties\n        /// <summary>\n        /// Имя комнаты\n        /// </summary>\n        public string Name { get; set; }\n        #endregion\n\n        #region Transformations\n        /// <summary>\n        /// Move\n        /// </summary>\n        /// <param name=\"direction\">Вектор, который задает направление перемещения комнаты и расстояние, на которое комната должна переместиться.</param>\n        public void Move(Vector2 direction)\n        /// <summary>\n        /// Поворачивает комнату на заданный угол относительно заданной точки.\n        /// </summary>\n        /// <param name=\"angle\">Угол поворота комнаты, заданный в радианах. Положительное значение угла означает поворот против часовой стрелки, отрицательное значение - поворот против часовой стрелки.</param>\n        /// <param name=\"basePoint\">Точка, относительно которой происходит поворот</param>\n        public void Rotate(double angle, Vector2 basePoint)\n        /// <summary>\n        /// Добавляет указанную точку в контур комнаты.\n        /// </summary>\n        /// <param name=\"point\">Точка, которую нужно добавить в контур комнаты.</param>\n        public void AddContourPoint(Vector2 point)\n        /// <summary>\n        /// Добавляет указанную точку в контур комнаты.\n        /// </summary>\n        /// <param name=\"point\">Точка, которую нужно добавить в контур комнаты.</param>\n        public void AddContourPoint(RoomPoint point)\n        /// <summary>\n        /// Удаляет из контура комнаты точку с указанными координатами, если такая точка принадлежит контуру.\n        /// </summary>\n        /// <param name=\"point\">Точка, которую нужно удалить из контура комнаты.</param>\n        public void RemoveContourPoint(Vector2 point)\n        /// <summary>\n        /// Добавляет в комнату дверь между точками с указанными координатами, если такие точки принадлежат контуру.\n        /// </summary>\n        /// <param name=\"firstPoint\">Точка слева от двери</param>\n        /// <param name=\"secondPoint\">Точка справа от двери</param>\n        /// <param name=\"doorRelativePosition\">Число от 0 до 1, которое определяет относительное положение двери между левой и правой точкой.</param>\n        public void AddDoorBetween(Vector2 firstPoint, Vector2 secondPoint, double doorRelativePosition)\n        #endregion\n\n        #region Interactions\n        /// <summary>\n        /// Присоединяет комнату к другой комнате с помощью указанной поверхности соединения.\n        /// </summary>\n        /// <param name=\"roomToConnect\">Комната, с которой нужно соединиться.</param>\n        /// <param name=\"withWall\">Параметр, который указывает, что между комнатами должна быть стена.</param>\n        /// <param name=\"addDoorAt\">Число от 0 до 1, которое определяет относительное положение двери на линии соединения комнат. Параметр является необязательным, его можно не указывать, если между комнатами не должно быть двери.</param>\n        public void ConnectTo(Room roomToConnect, bool withWall, double addDoorAt = -1)\n        /// <summary>\n        /// Получает точку контура комнаты по ее координатам, если такая имеется\n        /// </summary>\n        /// <param name=\"vec\">Координаты точки, которую нужно получить</param>\n        /// <returns></returns>\n        public RoomPoint GetPoint(Vector2 vec)\n        #endregion\n    }\n}\n", "git_diff_output_format_description": "The git diff command shows the code changes between two versions of code.\n    Git normally shows a chunk of lines that has been modified, not the entire file. Every chunk starts with a Chunk header. The chunk header will be identified by @@ (at the start and end). Then, there are two sets of numbers. For example, if the sets look like -3,4 +3,2, then -3,4 means from old version of code, extracting four lines starting from line 3, and +3,2 means from new version of code, extracting two lines starting from line 3.\n    Then come the modified lines, where the line starting with (-) should be removed from the old code, and the line starting with the (+) should be added to the new code.", "git_diff_pipeline_description": "To specify what needs to be changed in the code, you first need to specify which line of code the changes begin at. You also need to specify how many rows to remove and how many rows to add. This is specified in chunk header format, which looks like this: @@ -START_INDEX,NUM_REMOVED_ROWS +START_INDEX,NUM_ADDED_ROWS @@. In this format, START_INDEX is the number of the line starting from which lines of code must be removed. NUM_REMOVED_ROWS is the number of lines that must be removed from the code starting with line number START_INDEX. And NUM_ADDED_ROWS is the number of lines that must be inserted into the code starting with lines with the number START_INDEX.\n    Here are some examples of how to specify the starting line of changes and the number of lines removed and added using the chunk header format. For example, if you need to delete 1 line starting from line 6 and add 2 lines, you need to write @@ -6,1 +6,2 @@. If you need to delete 2 lines starting from line 13 and add 1 line, you need to write @@ -13,2 +13,1 @@.\n    After the chunk header you need to write which lines to remove and which to add. To write which lines need to be deleted, you need to write those lines by adding a \"-\" sign in front of them. To indicate which lines need to be inserted in place of the deleted ones, you need to write the added lines with a \"+\" sign at the beginning. There is no need to write lines that remain unchanged. Accordingly, you need to write only lines with the “-” or “+” sign.\n    Thus, to indicate what changes need to be made to the code, you need to specify the starting line of changes and the number of lines to remove and add in the chunk header format, and also write the lines that need to be removed with a \"-\" sign and the lines that need to be added, with a \"+\" sign."}